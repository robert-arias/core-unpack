# cspell:ignore drupaltestbot drupaltestbotpw analyse keyscan

# This is based on work from PreviousNext found in
# https://git.drupalcode.org/project/search_api_opensearch/-/blob/2.x/.gitlab-ci.yml

workflow:
  rules:
    - if: $CI_COMMIT_TITLE =~ /-draft$/
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH =~ /^1[01](\.\d+)?\.x$/

variables:
  _TARGET_PHP: "8.3"
  _TARGET_DB: "mysql-5.7"
  _CONFIG_DOCKERHUB_ROOT: "drupalci"
  MYSQL_ROOT_PASSWORD: root
  MYSQL_DATABASE: mysql
  MYSQL_USER: drupaltestbot
  MYSQL_PASSWORD: drupaltestbotpw
  TEST_DIRECTORIES: "core/tests/Drupal/Tests/Core/Recipe core/tests/Drupal/KernelTests/Core/Recipe core/tests/Drupal/FunctionalTests/Core/Recipe core/tests/Drupal/KernelTests/Core/Config/Action core/tests/Drupal/KernelTests/Core/Config/Storage/Checkpoint core/tests/Drupal/Tests/Core/Config/Checkpoint core/tests/Drupal/Tests/Core/Config/Action core/modules/content_moderation/tests/src/Kernel/ConfigAction core/modules/ckeditor5/tests/src/Kernel/ConfigAction"
  CODE_DIRECTORIES: "core/lib/Drupal/Core/Recipe core/lib/Drupal/Core/Config/Action core/modules/config/tests/config_action_duplicate_test core/tests/fixtures/recipes core/lib/Drupal/Core/Config/Checkpoint core/modules/content_moderation/src/Plugin/ConfigAction core/modules/ckeditor5/src/Plugin/ConfigAction"
  ALL_DIRECTORIES: "${CODE_DIRECTORIES} ${TEST_DIRECTORIES}"

default:
  image: $_CONFIG_DOCKERHUB_ROOT/php-$_TARGET_PHP-apache:production
  interruptible: true


stages:
  - build
  - test
  - deploy

build:
  stage: build
  cache:
    key: ${CI_COMMIT_REF_SLUG}-composer2
    paths:
      - vendor/
  script:
    - COMPOSER_ROOT_VERSION=10.0.x-dev composer install --no-interaction --no-progress --prefer-dist
  artifacts:
    paths:
      - vendor/
      - composer.lock

phpcs:
  stage: test
  needs: [ build ]
  dependencies:
    - build
  script:
    - composer run phpcs -- ${ALL_DIRECTORIES} -ps --report-full --report-summary --report-\\Micheh\\PhpCodeSniffer\\Report\\Gitlab=phpcs-quality-report.json
  artifacts:
    reports:
      codequality: phpcs-quality-report.json

phpstan:
  stage: test
  needs: [ build ]
  dependencies:
    - build
  script:
    # Ensure core phpstan passes.
    - vendor/bin/phpstan analyse -c core/phpstan-partial.neon ${ALL_DIRECTORIES} || true
    - vendor/bin/phpstan analyze -c core/phpstan-partial.neon ${ALL_DIRECTORIES} --no-progress --error-format=gitlab > phpstan-quality-report.json
  artifacts:
    reports:
      codequality: phpstan-quality-report.json

phpstan-level9:
  stage: test
  needs: [ build ]
  dependencies:
    - build
  script:
    # Do a level 9 pass using baseline for even stricter checking. The baseline
    # can be regenerated locally by running:
    # vendor/bin/phpstan analyse -l 9 --generate-baseline=phpstan-level9-baseline.neon LIST_ALL_THE_DIRECTORIES
    - vendor/bin/phpstan analyse -l 9 -c phpstan-level9-baseline.neon ${ALL_DIRECTORIES} || EXIT_CODE=$?
    - vendor/bin/phpstan analyse -l 9 --no-progress -c phpstan-level9-baseline.neon ${ALL_DIRECTORIES} --error-format=gitlab > phpstan9-quality-report.json || true
    - |
      if [ -n "$EXIT_CODE" ]; then
        vendor/bin/phpstan analyse -l 9 --no-progress --generate-baseline=phpstan-level9-baseline.neon -c phpstan-level9-baseline.neon ${ALL_DIRECTORIES} || true
        exit $EXIT_CODE
      fi
  artifacts:
    reports:
      codequality: phpstan9-quality-report.json
    # Only store the baseline if the job fails.
    when: on_failure
    paths:
      - phpstan-level9-baseline.neon

cspell:
  stage: test
  before_script:
    - cd core
    - corepack enable
    - yarn install
  script:
    # Build up a list of the directories in the required format.
    - |
      export DIRECTORIES=""
      for DIRECTORY in $ALL_DIRECTORIES
      do
        export DIRECTORIES="${DIRECTORIES} ${DIRECTORY}/**/*"
      done
      echo "Spellchecking the following directories:"
      echo  ${DIRECTORIES}
    - yarn run cspell -c .cspell.json --root .. ${DIRECTORIES}

test:
  stage: test
  needs: [ build ]
  dependencies:
    - build
  services:
    - name: $_CONFIG_DOCKERHUB_ROOT/$_TARGET_DB:production
      alias: database
  variables:
    SIMPLETEST_DB: "mysql://$MYSQL_USER:$MYSQL_PASSWORD@database/$MYSQL_DATABASE?module=mysql"
    SIMPLETEST_BASE_URL: "http://localhost/subdirectory"
    BROWSERTEST_OUTPUT_DIRECTORY: "sites/simpletest/browser_output"
    BROWSERTEST_OUTPUT_FILE: "test-output.html"
    MINK_DRIVER_ARGS_WEBDRIVER: '["chrome", {"chromeOptions": { "args": [ "--disable-gpu", "--headless" ] } }, "http://127.0.0.1:4444/wd/hub" ]'
#    SYMFONY_DEPRECATIONS_HELPER: "max[self]=0"
  before_script:
    - ln -s $CI_PROJECT_DIR /var/www/html/subdirectory
    - sudo service apache2 start
  script:
    - mkdir sites/simpletest
    - chown www-data sites/simpletest
    - mkdir junit-reports
    - chown www-data junit-reports
    - mkdir -p $BROWSERTEST_OUTPUT_DIRECTORY
    - chown www-data $BROWSERTEST_OUTPUT_DIRECTORY
    - |
      for TEST_DIRECTORY in $TEST_DIRECTORIES
      do
        REPORT="${TEST_DIRECTORY//[\/]/-}-test-report.xml"
        sudo --preserve-env=SIMPLETEST_DB,SIMPLETEST_BASE_URL,BROWSERTEST_OUTPUT_DIRECTORY,BROWSERTEST_OUTPUT_FILE,MINK_DRIVER_ARGS_WEBDRIVER -u www-data vendor/bin/phpunit -v -c core/phpunit.xml.dist --log-junit junit-reports/${REPORT} ${TEST_DIRECTORY}
      done
    - ls -lah junit-reports
  artifacts:
    when: always
    reports:
      junit: "junit-reports/*"

# This job builds a patch. It relies on the repository having a deployment key
# and the private key being a CI variable. The variable is protected and only
# available on protected branches. For more information on how this is set up
# see https://dev.to/nop33/git-commits-from-gitlab-ci-2l90.
build-patch:
  interruptible: false
  variables:
    # We need a fuller history for merging.
    GIT_DEPTH: 2000
  stage: deploy
  only:
    refs:
      - /^1[01](\.\d+)?\.x$/
  before_script:
    # Set up the SSH key and the known_hosts file
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - ssh-keyscan git.drupal.org >> ~/.ssh/known_hosts
  script:
    - git config --global user.email "gitlabci@example.com"
    - git config --global user.name "GitLabCi"
    - git config --global --add safe.directory /builds/project/distributions_recipes
    - git remote add drupal-core https://git.drupalcode.org/project/drupal.git
    - git remote set-url origin git@git.drupal.org:project/distributions_recipes.git
    - git remote -v
    - git fetch origin
    - git fetch drupal-core $CI_COMMIT_BRANCH
    - git checkout origin/$CI_COMMIT_BRANCH -b $CI_COMMIT_BRANCH-patch
    - git merge drupal-core/$CI_COMMIT_BRANCH HEAD
    - git diff drupal-core/$CI_COMMIT_BRANCH HEAD -- core > new-recipe.patch
    - git checkout patch
    - cp new-recipe.patch recipe-$CI_COMMIT_BRANCH.patch
    - git add recipe-$CI_COMMIT_BRANCH.patch
    - git status --untracked-files=no
    - if [ -n "$(git status --porcelain --untracked-files=no)" ]; then
    -   git add recipe-$CI_COMMIT_BRANCH.patch
    -   git commit -m "Update recipe $CI_COMMIT_BRANCH patch $CI_COMMIT_SHORT_SHA $CI_COMMIT_MESSAGE"
    -   git pull --rebase
    -   git push origin patch -o ci.skip
    - fi
  artifacts:
    when: always
    paths:
      - recipe-$CI_COMMIT_BRANCH.patch
